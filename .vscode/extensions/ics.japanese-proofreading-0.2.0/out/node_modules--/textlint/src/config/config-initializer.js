// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Promise = require("bluebird");
const fs = require("fs");
const path = require("path");
const ObjectAssign = require("object-assign");
const isFile = require("is-file");
const readPkg = require("read-pkg");
const config_1 = require("./config");
const logger_1 = require("../util/logger");
/**
 * read package.json if found it
 * @param {string} dir
 * @returns {Promise.<Array.<String>>}
 */
const getTextlintDependencyNames = (dir) => {
    return readPkg(dir)
        .then((pkg) => {
        const dependencies = pkg.dependencies || {};
        const devDependencies = pkg.devDependencies || {};
        const mergedDependencies = ObjectAssign({}, dependencies, devDependencies);
        const pkgNames = Object.keys(mergedDependencies);
        return pkgNames.filter(pkgName => {
            const ruleOrFilter = pkgName.indexOf(config_1.Config.FILTER_RULE_NAME_PREFIX) !== -1 ||
                pkgName.indexOf(config_1.Config.RULE_NAME_PREFIX) !== -1;
            if (pkgName === "textlint-rule-helper") {
                return false;
            }
            return ruleOrFilter;
        });
    })
        .catch(() => {
        return [];
    });
};
/**
 * create object that fill with `defaultValue`
 * @param {Array} array
 * @param {*} defaultValue
 * @returns {Object}
 */
const arrayToObject = (array, defaultValue) => {
    const object = {};
    array.forEach(item => {
        object[item] = defaultValue;
    });
    return object;
};
/**
 * Create .textlintrc file
 * @params {string} dir The directory of .textlintrc file
 * @returns {Promise.<number>} The exit code for the operation.
 */
exports.createConfigFile = (options) => {
    const dir = options.dir;
    return getTextlintDependencyNames(dir).then(pkgNames => {
        const rcFile = `.${config_1.Config.CONFIG_FILE_NAME}rc`;
        const filePath = path.resolve(dir, rcFile);
        if (isFile(filePath)) {
            logger_1.Logger.error(`${rcFile} is already existed.`);
            return Promise.resolve(1);
        }
        const filters = pkgNames
            .filter(pkgName => {
            return pkgName.indexOf(config_1.Config.FILTER_RULE_NAME_PREFIX) !== -1;
        })
            .map(filterName => {
            return filterName.replace(config_1.Config.FILTER_RULE_NAME_PREFIX, "");
        });
        const rules = pkgNames
            .filter(pkgName => {
            return pkgName.indexOf(config_1.Config.RULE_NAME_PREFIX) !== -1;
        })
            .map(filterName => {
            return filterName.replace(config_1.Config.RULE_NAME_PREFIX, "");
        });
        const defaultTextlintRc = {
            filters: arrayToObject(filters, true),
            rules: arrayToObject(rules, true)
        };
        const output = JSON.stringify(defaultTextlintRc, null, 2);
        fs.writeFileSync(filePath, output);
        if (options.verbose) {
            logger_1.Logger.log(`${rcFile} is created.`);
        }
        return Promise.resolve(0);
    });
};
