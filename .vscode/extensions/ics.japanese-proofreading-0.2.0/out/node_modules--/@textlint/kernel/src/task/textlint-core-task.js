// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TraverseController = require("@textlint/ast-traverse").Controller;
const traverseController = new TraverseController();
const debug = require("debug")("textlint:core-task");
const promise_event_emitter_1 = require("./promise-event-emitter");
const rule_error_1 = require("../core/rule-error");
const source_location_1 = require("../core/source-location");
const timing_1 = require("../util/timing");
const MessageType_1 = require("../shared/type/MessageType");
const events_1 = require("events");
const assert = require("assert");
const rule_context_1 = require("../core/rule-context");
const Bluebird = require("bluebird");
class RuleTypeEmitter extends promise_event_emitter_1.PromiseEventEmitter {
}
/**
 * CoreTask receive AST and prepare, traverse AST, emit nodeType event!
 * You can observe task and receive "message" event that is TextLintMessage.
 */
class TextLintCoreTask extends events_1.EventEmitter {
    static get events() {
        return {
            // receive start event
            start: "start",
            // receive message from each rules
            message: "message",
            // receive complete event
            complete: "complete",
            // receive error event
            error: "error"
        };
    }
    constructor() {
        super();
        this.ruleTypeEmitter = new RuleTypeEmitter();
    }
    createShouldIgnore() {
        const shouldIgnore = (args) => {
            const { ruleId, range, optional } = args;
            assert(typeof range[0] !== "undefined" && typeof range[1] !== "undefined" && range[0] >= 0 && range[1] >= 0, "ignoreRange should have actual range: " + range);
            // FIXME: should have index, loc
            // should be compatible with LintReportedMessage?
            const message = {
                type: MessageType_1.default.ignore,
                ruleId: ruleId,
                range: range,
                // ignoring target ruleId - default: filter all messages
                ignoringRuleId: optional.ruleId || "*"
            };
            this.emit(TextLintCoreTask.events.message, message);
        };
        return shouldIgnore;
    }
    createReporter(sourceCode) {
        const sourceLocation = new source_location_1.default(sourceCode);
        /**
         * push new RuleError to results
         * @param {ReportMessage} reportArgs
         */
        const reportFunction = (reportArgs) => {
            const { ruleId, severity, ruleError } = reportArgs;
            debug("%s pushReport %s", ruleId, ruleError);
            const { line, column, fix } = sourceLocation.adjust(reportArgs);
            const index = sourceCode.positionToIndex({ line, column });
            // add TextLintMessage
            const message = {
                type: MessageType_1.default.lint,
                ruleId: ruleId,
                message: ruleError.message,
                index,
                // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts
                line: line,
                column: column + 1,
                severity: severity,
                fix: fix !== undefined ? fix : undefined
            };
            if (!(ruleError instanceof rule_error_1.default)) {
                // FIXME: RuleReportedObject should be removed
                // `error` is a any data.
                const data = ruleError;
                message.data = data;
            }
            this.emit(TextLintCoreTask.events.message, message);
        };
        return reportFunction;
    }
    /**
     * start process and emitting events.
     * You can listen message by `task.on("message", message => {})`
     * @param {SourceCode} sourceCode
     */
    startTraverser(sourceCode) {
        this.emit(TextLintCoreTask.events.start);
        const promiseQueue = [];
        const ruleTypeEmitter = this.ruleTypeEmitter;
        traverseController.traverse(sourceCode.ast, {
            enter(node, parent) {
                const type = node.type;
                Object.defineProperty(node, "parent", { value: parent });
                if (ruleTypeEmitter.listenerCount(type) > 0) {
                    const promise = ruleTypeEmitter.emit(type, node);
                    promiseQueue.push(promise);
                }
            },
            leave(node) {
                const type = `${node.type}:exit`;
                if (ruleTypeEmitter.listenerCount(type) > 0) {
                    const promise = ruleTypeEmitter.emit(type, node);
                    promiseQueue.push(promise);
                }
            }
        });
        Bluebird.all(promiseQueue)
            .then(() => {
            this.emit(TextLintCoreTask.events.complete);
        })
            .catch(error => {
            this.emit(TextLintCoreTask.events.error, error);
        });
    }
    /**
     * try to get rule object
     */
    tryToGetRuleObject(ruleCreator, ruleContext, ruleOptions) {
        try {
            return ruleCreator(ruleContext, ruleOptions);
        }
        catch (error) {
            error.message = `Error while loading rule '${ruleContext.id}': ${error.message}`;
            throw error;
        }
    }
    /**
     * try to get filter rule object
     */
    tryToGetFilterRuleObject(ruleCreator, ruleContext, ruleOptions) {
        try {
            return ruleCreator(ruleContext, ruleOptions);
        }
        catch (error) {
            error.message = `Error while loading filter rule '${ruleContext.id}': ${error.message}`;
            throw error;
        }
    }
    /**
     * add all the node types as listeners of the rule
     * @param {Function} ruleCreator
     * @param {Readonly<RuleContext>|Readonly<FilterRuleContext>} ruleContext
     * @param {Object|boolean|undefined} ruleOptions
     * @returns {Object}
     */
    tryToAddListenRule(ruleCreator, ruleContext, ruleOptions) {
        const ruleObject = ruleContext instanceof rule_context_1.default
            ? this.tryToGetRuleObject(ruleCreator, ruleContext, ruleOptions)
            : this.tryToGetFilterRuleObject(ruleCreator, ruleContext, ruleOptions);
        const types = Object.keys(ruleObject);
        types.forEach((nodeType) => {
            this.ruleTypeEmitter.on(nodeType, timing_1.default.enabled ? timing_1.default.time(ruleContext.id, ruleObject[nodeType]) : ruleObject[nodeType]);
        });
    }
}
exports.default = TextLintCoreTask;
