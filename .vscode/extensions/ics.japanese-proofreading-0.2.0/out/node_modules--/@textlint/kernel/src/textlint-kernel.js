// MIT Â© 2017 azu
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const source_code_1 = require("./core/source-code");
// sequence
const fixer_processor_1 = require("./fixer/fixer-processor");
// parallel
const linter_processor_1 = require("./linter/linter-processor");
// message process manager
const MessageProcessManager_1 = require("./messages/MessageProcessManager");
const filter_ignored_process_1 = require("./messages/filter-ignored-process");
const filter_duplicated_process_1 = require("./messages/filter-duplicated-process");
const filter_severity_process_1 = require("./messages/filter-severity-process");
const sort_messages_process_1 = require("./messages/sort-messages-process");
const descriptor_1 = require("./descriptor");
/**
 * add fileName to trailing of error message
 * @param {string|undefined} fileName
 * @param {string} message
 * @returns {string}
 */
function addingAtFileNameToError(fileName, message) {
    if (!fileName) {
        return message;
    }
    return `${message}
at ${fileName}`;
}
/**
 * TextlintKernel is core logic written by pure JavaScript.
 *
 * Pass
 *
 * - config
 * - plugins
 * - rules
 * - filterRules
 * - messageProcessor
 *
 */
class TextlintKernel {
    /**
     * @param config
     */
    constructor(config = {}) {
        // this.config often is undefined.
        this.config = config;
        // Initialize Message Processor
        // Now, It it built-in process only
        // filter `shouldIgnore()` results
        this.messageProcessManager = new MessageProcessManager_1.default([filter_ignored_process_1.default]);
        // filter duplicated messages
        this.messageProcessManager.add(filter_duplicated_process_1.default);
        // filter by severity
        this.messageProcessManager.add(filter_severity_process_1.default(this.config));
        this.messageProcessManager.add(sort_messages_process_1.default);
    }
    /**
     * lint text by registered rules.
     * The result contains target filePath and error messages.
     * @param {string} text
     * @param {Object} options linting options
     * @returns {Promise.<TextlintResult>}
     */
    lintText(text, options) {
        return Promise.resolve().then(() => {
            const descriptor = new descriptor_1.TextlintKernelDescriptor({
                rules: options.rules || [],
                filterRules: options.filterRules || [],
                plugins: options.plugins || []
            });
            return this._parallelProcess({
                descriptor,
                text,
                options
            });
        });
    }
    /**
     * fix texts and return fix result object
     * @param {string} text
     * @param {Object} options lint options
     * @returns {Promise.<TextlintFixResult>}
     */
    fixText(text, options) {
        return Promise.resolve().then(() => {
            const descriptor = new descriptor_1.TextlintKernelDescriptor({
                rules: options.rules || [],
                filterRules: options.filterRules || [],
                plugins: options.plugins || []
            });
            return this._sequenceProcess({
                descriptor,
                options,
                text
            });
        });
    }
    /**
     * process text in parallel for Rules and return {Promise.<TextLintResult>}
     * In other word, parallel flow process.
     * @param {*} processor
     * @param {string} text
     * @param {Object} options
     * @returns {Promise.<TextlintResult>}
     * @private
     */
    _parallelProcess({ descriptor, text, options }) {
        const { ext, filePath, configBaseDir } = options;
        const plugin = descriptor.findPluginDescriptorWithExt(ext);
        if (plugin === undefined) {
            throw new Error(`Not found available plugin for ${ext}`);
        }
        const processor = plugin.processor;
        const { preProcess, postProcess } = processor.processor(ext);
        assert(typeof preProcess === "function" && typeof postProcess === "function", "processor should implements {preProcess, postProcess}");
        const ast = preProcess(text, filePath);
        const sourceCode = new source_code_1.default({
            text,
            ast,
            ext,
            filePath
        });
        const linterProcessor = new linter_processor_1.default(processor, this.messageProcessManager);
        return linterProcessor
            .process({
            config: this.config,
            ruleDescriptors: descriptor.rule,
            filterRuleDescriptors: descriptor.filterRule,
            sourceCode,
            configBaseDir
        })
            .catch(error => {
            error.message = addingAtFileNameToError(filePath, error.message);
            return Promise.reject(error);
        });
    }
    /**
     * process text in series for Rules and return {Promise.<TextlintFixResult>}
     * In other word, sequence flow process.
     * @param {*} processor
     * @param {string} text
     * @param {TextlintKernelOptions} options
     * @returns {Promise.<TextlintFixResult>}
     * @private
     */
    _sequenceProcess({ descriptor, text, options }) {
        const { ext, filePath, configBaseDir } = options;
        const plugin = descriptor.findPluginDescriptorWithExt(ext);
        if (plugin === undefined) {
            throw new Error(`Not found available plugin for ${ext}`);
        }
        const processor = plugin.processor;
        const { preProcess, postProcess } = processor.processor(ext);
        assert(typeof preProcess === "function" && typeof postProcess === "function", "processor should implements {preProcess, postProcess}");
        const ast = preProcess(text, filePath);
        const sourceCode = new source_code_1.default({
            text,
            ast,
            ext,
            filePath
        });
        const fixerProcessor = new fixer_processor_1.default(processor, this.messageProcessManager);
        return fixerProcessor
            .process({
            config: this.config,
            ruleDescriptors: descriptor.rule,
            filterRules: descriptor.filterRule,
            sourceCode,
            configBaseDir
        })
            .catch(error => {
            error.message = addingAtFileNameToError(filePath, error.message);
            return Promise.reject(error);
        });
    }
}
exports.TextlintKernel = TextlintKernel;
