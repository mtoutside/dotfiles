// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rule_error_1 = require("./rule-error");
const assert = require("assert");
exports.createFreezedFilterRuleContext = (args) => {
    return Object.freeze(new FilterRuleContext(args));
};
/**
 * Rule context object is passed to each rule as `context`
 * @param {string} ruleId
 * @param {SourceCode} sourceCode
 * @param {function(ShouldIgnoreArgs)} ignoreReport
 * @constructor
 */
class FilterRuleContext {
    constructor(args) {
        this.shouldIgnore = (range, optional = {}) => {
            assert(Array.isArray(range) && typeof range[0] === "number" && typeof range[1] === "number", "shouldIgnore([number, number]); accept range.");
            this._ignoreReport({ ruleId: this._ruleId, range, optional });
        };
        /**
         * get file path current processing.
         */
        this.getFilePath = () => {
            return this._sourceCode.getFilePath();
        };
        /**
         * Gets the source code for the given node.
         * @param {TxtNode=} node The AST node to get the text for.
         * @param {int=} beforeCount The number of characters before the node to retrieve.
         * @param {int=} afterCount The number of characters after the node to retrieve.
         * @returns {string} The text representing the AST node.
         */
        this.getSource = (node, beforeCount, afterCount) => {
            return this._sourceCode.getSource(node, beforeCount, afterCount);
        };
        /**
         * get config base directory path
         * config base directory path often is the place of .textlintrc
         *
         * e.g.) /path/to/dir/.textlintrc
         * `getConfigBaseDir()` return `"/path/to/dir/"`.
         *
         * When using textlint as module, it is specified by `configBaseDir`
         * If not found the value, return undefined.
         *
         * You can use it for resolving relative path from config dir.
         * @returns {string|undefined}
         */
        this.getConfigBaseDir = () => {
            return this._configBaseDir;
        };
        this._ruleId = args.ruleId;
        this._sourceCode = args.sourceCode;
        this._ignoreReport = args.ignoreReport;
        this._configBaseDir = args.configBaseDir;
    }
    /**
     * Rule id
     * @returns {string}
     */
    get id() {
        return this._ruleId;
    }
    /**
     * Node's type values
     * @type {TextLintNodeType}
     */
    get Syntax() {
        return this._sourceCode.getSyntax();
    }
    /**
     * CustomError object
     * @type {RuleError}
     */
    get RuleError() {
        return rule_error_1.default;
    }
    /**
     * Not use
     * @returns {() => void}
     */
    get report() {
        return () => {
            throw new Error("Filter rule can not report");
        };
    }
}
exports.default = FilterRuleContext;
