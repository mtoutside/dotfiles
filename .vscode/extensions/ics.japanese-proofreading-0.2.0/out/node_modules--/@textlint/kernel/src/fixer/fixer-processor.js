// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug")("textlint:fixer-processor");
const assert = require("assert");
const fixer_task_1 = require("../task/fixer-task");
const source_code_1 = require("../core/source-code");
const source_code_fixer_1 = require("./source-code-fixer");
const task_runner_1 = require("../task/task-runner");
class FixerProcessor {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    constructor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run fixer process
     * @param {Config} config
     * @param {string} [configBaseDir]
     * @param {TextlintKernelRule[]} [rules]
     * @param {TextlintKernelFilterRule[]} [filterRules]
     * @param {SourceCode} sourceCode
     * @returns {Promise.<TextlintFixResult>}
     */
    process({ config, configBaseDir, ruleDescriptors, filterRules, sourceCode }) {
        assert(sourceCode);
        const { preProcess, postProcess } = this.processor.processor(sourceCode.ext);
        // messages
        let resultFilePath = sourceCode.filePath;
        // applied fixing messages
        // Revert = Sequentially apply applied message to applied output
        // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);
        const applyingMessages = [];
        // not applied fixing messages
        const remainingMessages = [];
        // original means original for applyingMessages and remainingMessages
        // pre-applyingMessages + remainingMessages
        const originalMessages = [];
        const fixerProcessList = ruleDescriptors.fixableDescriptors.map(ruleDescriptor => {
            return (sourceText) => {
                // create new SourceCode object
                const newSourceCode = new source_code_1.default({
                    text: sourceText,
                    ast: preProcess(sourceText, sourceCode.filePath),
                    filePath: resultFilePath,
                    ext: sourceCode.ext
                });
                // create new Task
                const task = new fixer_task_1.default({
                    config,
                    fixableRuleDescriptor: ruleDescriptor,
                    filterRuleDescriptors: filterRules,
                    sourceCode: newSourceCode,
                    configBaseDir
                });
                return task_runner_1.default.process(task).then(messages => {
                    const result = postProcess(messages, sourceCode.filePath);
                    const filteredResult = {
                        messages: this.messageProcessManager.process(result.messages),
                        filePath: result.filePath ? result.filePath : `<Unkown${sourceCode.ext}>`
                    };
                    // TODO: should be removed resultFilePath
                    resultFilePath = filteredResult.filePath;
                    const applied = source_code_fixer_1.default.applyFixes(newSourceCode, filteredResult.messages);
                    // add messages
                    Array.prototype.push.apply(applyingMessages, applied.applyingMessages);
                    Array.prototype.push.apply(remainingMessages, applied.remainingMessages);
                    Array.prototype.push.apply(originalMessages, applied.messages);
                    // if not fixed, still use current sourceText
                    if (!applied.fixed) {
                        return sourceText;
                    }
                    // if fixed, use fixed text at next
                    return applied.output;
                });
            };
        });
        const promiseTask = fixerProcessList.reduce((promise, fixerProcess) => {
            return promise.then(sourceText => {
                return fixerProcess(sourceText);
            });
        }, Promise.resolve(sourceCode.text));
        return promiseTask.then(output => {
            debug(`Finish Processing: ${resultFilePath}`);
            debug(`applyingMessages: ${applyingMessages.length}`);
            debug(`remainingMessages: ${remainingMessages.length}`);
            return {
                filePath: resultFilePath ? resultFilePath : `<Unkown${sourceCode.ext}>`,
                output,
                messages: originalMessages,
                applyingMessages,
                remainingMessages
            };
        });
    }
}
exports.default = FixerProcessor;
