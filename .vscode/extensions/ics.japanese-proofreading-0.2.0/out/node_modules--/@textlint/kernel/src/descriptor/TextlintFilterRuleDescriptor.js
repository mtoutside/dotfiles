// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rule_creator_helper_1 = require("./rule-creator-helper");
const deepEqual = require("deep-equal");
/**
 * Textlint Rule Descriptor.
 * It handle RuleCreator and RuleOption.
 */
class TextlintFilterRuleDescriptor {
    constructor(kernelFilterRule) {
        this.kernelFilterRule = kernelFilterRule;
    }
    get id() {
        return this.kernelFilterRule.ruleId;
    }
    get rule() {
        return this.kernelFilterRule.rule;
    }
    /**
     * Return true if this rule is enabled.
     */
    get enabled() {
        return this.rawOptions !== false;
    }
    /**
     * Return filter function
     * You should check hasLiner before call this.
     */
    get filter() {
        return rule_creator_helper_1.getFilter(this.rule);
    }
    /**
     * Return normalized rule option object.
     * If the rule have not option, return `true` by default.
     */
    get normalizedOptions() {
        // default: { ruleName: true }
        const DefaultRuleConfigValue = {};
        if (typeof this.kernelFilterRule.options === "boolean" || this.kernelFilterRule.options === undefined) {
            return DefaultRuleConfigValue;
        }
        else {
            return this.kernelFilterRule.options;
        }
    }
    get rawOptions() {
        return this.kernelFilterRule.options;
    }
    /**
     * Return true if descriptor is same
     */
    equals(descriptor) {
        return (this.rule === descriptor.rule &&
            deepEqual(this.normalizedOptions, descriptor.normalizedOptions, {
                strict: true
            }));
    }
    toKernel() {
        return this.kernelFilterRule;
    }
}
exports.TextlintFilterRuleDescriptor = TextlintFilterRuleDescriptor;
