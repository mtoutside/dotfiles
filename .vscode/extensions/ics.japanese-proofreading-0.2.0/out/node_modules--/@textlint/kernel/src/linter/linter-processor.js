// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const linter_task_1 = require("../task/linter-task");
const task_runner_1 = require("../task/task-runner");
class LinterProcessor {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    constructor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run linter process
     */
    process({ config, configBaseDir, ruleDescriptors, filterRuleDescriptors, sourceCode }) {
        const { preProcess, postProcess } = this.processor.processor(sourceCode.ext);
        assert(typeof preProcess === "function" && typeof postProcess === "function", "processor should implement {preProcess, postProcess}");
        const task = new linter_task_1.default({
            config,
            ruleDescriptors: ruleDescriptors,
            filterRuleDescriptors: filterRuleDescriptors,
            sourceCode,
            configBaseDir
        });
        return task_runner_1.default.process(task).then(messages => {
            const result = postProcess(messages, sourceCode.filePath);
            result.messages = this.messageProcessManager.process(result.messages);
            if (result.filePath == null) {
                result.filePath = `<Unkown${sourceCode.ext}>`;
            }
            assert(result.filePath && result.messages.length >= 0, "postProcess should return { messages, filePath } ");
            return result;
        });
    }
}
exports.default = LinterProcessor;
